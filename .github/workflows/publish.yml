name: Publish NPM package
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_publish:
        description: "Force publish even if version unchanged"
        type: boolean
        default: false
      dry_run:
        description: "Run in dry-run mode (no actual publishing)"
        type: boolean
        default: false

concurrency:
  group: publish-npm-${{ github.ref }}
  cancel-in-progress: false

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      id-token: write
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
      published: ${{ steps.publish.outputs.published }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Validate package.json
        run: |
          if ! jq -e '.name' package.json > /dev/null; then
            echo "Error: package.json is missing 'name' field"
            exit 1
          fi
          if ! jq -e '.version' package.json > /dev/null; then
            echo "Error: package.json is missing 'version' field"
            exit 1
          fi
          if ! npm version --dry-run $(jq -r .version package.json) 2>/dev/null; then
            echo "Error: Invalid version format in package.json"
            exit 1
          fi

      - name: Run tests
        run: bun run test

      - name: Run linting (if available)
        run: |
          if jq -e '.scripts.lint' package.json > /dev/null; then
            echo "Running linting..."
            bun run lint
          else
            echo "No lint script found, skipping"
          fi

      - name: Check version and determine if publish is needed
        id: check
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "Current version: $CURRENT_VERSION"

          # Check if version already exists on NPM
          PACKAGE_NAME=$(jq -r .name package.json)
          if npm view "$PACKAGE_NAME@$CURRENT_VERSION" version 2>/dev/null; then
            echo "Version $CURRENT_VERSION already exists on NPM"
            VERSION_EXISTS_ON_NPM=true
          else
            echo "Version $CURRENT_VERSION does not exist on NPM"
            VERSION_EXISTS_ON_NPM=false
          fi

          # Check against git tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          LATEST_VERSION=${LATEST_TAG#v}

          # Determine if we should publish
          SHOULD_PUBLISH=false
          if [ "${{ github.event.inputs.force_publish }}" = "true" ]; then
            echo "Force publish enabled"
            SHOULD_PUBLISH=true
          elif [ "$LATEST_VERSION" != "$CURRENT_VERSION" ] && [ "$VERSION_EXISTS_ON_NPM" = "false" ]; then
            echo "Version changed and doesn't exist on NPM"
            SHOULD_PUBLISH=true
          elif [ "$VERSION_EXISTS_ON_NPM" = "true" ]; then
            echo "Version already exists on NPM, skipping publish"
            SHOULD_PUBLISH=false
          else
            echo "No version change detected"
            SHOULD_PUBLISH=false
          fi

          echo "version_changed=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Build package
        if: steps.check.outputs.version_changed == 'true'
        run: |
          if jq -e '.scripts.build' package.json > /dev/null; then
            echo "Building package..."
            bun run build
          else
            echo "No build script found, skipping"
          fi

      - name: Verify build artifacts
        if: steps.check.outputs.version_changed == 'true'
        run: |
          if [ -f "dist/index.js" ] || [ -f "build/index.js" ] || [ -f "lib/index.js" ]; then
            echo "Build artifacts found"
          else
            echo "Warning: No common build artifacts found. Proceeding with publish..."
          fi

      - name: Publish to NPM
        id: publish
        if: steps.check.outputs.version_changed == 'true'
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "DRY RUN: Would publish version ${{ steps.check.outputs.new_version }}"
            npm publish --dry-run --access public
            echo "published=false" >> $GITHUB_OUTPUT
          else
            echo "Publishing version ${{ steps.check.outputs.new_version }}"
            npm publish --access public --provenance
            echo "published=true" >> $GITHUB_OUTPUT
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create git tag
        if: steps.check.outputs.version_changed == 'true' && steps.publish.outputs.published == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          TAG_NAME="v${{ steps.check.outputs.new_version }}"

          # Check if tag already exists
          if git tag -l | grep -q "^$TAG_NAME$"; then
            echo "Tag $TAG_NAME already exists, skipping tag creation"
          else
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "Created and pushed tag: $TAG_NAME"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check.outputs.version_changed == 'true' && steps.publish.outputs.published == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.check.outputs.new_version }}
          name: Release v${{ steps.check.outputs.new_version }}
          body: |
            ## Changes in v${{ steps.check.outputs.new_version }}

            🎉 New version published to NPM!

            📦 Package: ${{ steps.check.outputs.package_name }}
            📝 Version: ${{ steps.check.outputs.new_version }}
            🚀 Published: ${{ steps.publish.outputs.published }}

            [View on NPM](https://www.npmjs.com/package/${{ steps.check.outputs.package_name }})
          draft: false
          prerelease: false
          generateReleaseNotes: true
          makeLatest: true

      - name: Notify on success
        if: steps.check.outputs.version_changed == 'true' && steps.publish.outputs.published == 'true'
        run: |
          echo "✅ Successfully published ${{ steps.check.outputs.package_name }}@${{ steps.check.outputs.new_version }} to NPM"
          echo "📦 Package URL: https://www.npmjs.com/package/${{ steps.check.outputs.package_name }}"

      - name: Notify on skip
        if: steps.check.outputs.version_changed == 'false'
        run: |
          echo "ℹ️ No changes detected or version already exists. Skipping publish."

  # Optional: Notify team on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: publish
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "❌ NPM publish workflow failed"
          echo "Please check the logs and fix any issues"
